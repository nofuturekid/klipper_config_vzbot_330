[printer]
kinematics: corexy
max_velocity: 300
max_accel: 5000
max_accel_to_decel: 2500
square_corner_velocity: 6
max_z_velocity: 15
max_z_accel: 300

[mcu]
serial: /tmp/klipper_host_mcu

[temperature_sensor raspberry_pi]
sensor_type: temperature_host

[mcu mainboard0]
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_5B0036000250304235323120-if00
baud: 250000

[board_pins Mellow3D_Fly_Super_8]
#   Mellow3D Fly Super 8 (Infinity Pins), pins can be found from
#   ref: https://teamgloomy.github.io/images/fly_super8_pins.svg
#   ref: https://teamgloomy.github.io/fly_super8_pins.html
mcu: mainboard0
#   A comma separated list of micro-controllers that may use the
#   aliases. The default is to apply the aliases to the main "mcu".
aliases:
#   A comma separated list of "name=value" aliases to create for the
#   given micro-controller. For example, "EXP1_1=PE6" would create an
#   "EXP1_1" alias for the "PE6" pin. However, if "value" is enclosed
#   in "<>" then "name" is created as a reserved pin (for example,
#   "EXP1_9=<GND>" would reserve "EXP1_9"). Any number of options
#   starting with "aliases_" may be specified.

    # DRIVERS
    DRIVER0_STEP=PE2, DRIVER0_DIR=PC5, DRIVER0_ENABLE=PF11, DRIVER0_DIAG=PG12, DRIVER0_UART=PC4,   # HV
    DRIVER1_STEP=PE3, DRIVER1_DIR=PF13, DRIVER1_ENABLE=PF14, DRIVER1_DIAG=PG11, DRIVER1_UART=PF12, # HV
    DRIVER2_STEP=PE4, DRIVER2_DIR=PPG0, DRIVER2_ENABLE=PG1, DRIVER2_DIAG=PG10, DRIVER2_UART=PF15,  # HV
    DRIVER3_STEP=PE14, DRIVER3_DIR=PE8, DRIVER3_ENABLE=PE9, DRIVER3_DIAG=PG9, DRIVER3_UART=PE7,
    DRIVER4_STEP=PE15, DRIVER4_DIR=PE11, DRIVER4_ENABLE=PF2, DRIVER4_DIAG=PD7, DRIVER4_UART=PE10,
    DRIVER5_STEP=PE1, DRIVER5_DIR=PF0, DRIVER5_ENABLE=PC15, DRIVER5_DIAG=PD6, DRIVER5_UART=PF1,
    DRIVER6_STEP=PE0, DRIVER6_DIR=PG3, DRIVER6_ENABLE=PG4, DRIVER6_DIAG=PA8, DRIVER6_UART=PG2,
    DRIVER7_STEP=PE6, DRIVER7_DIR=PG6, DRIVER7_ENABLE=PG7, DRIVER7_DIAG=PF8, DRIVER7_UART=PG5,

    # INPUT/OUTPUTS (ENDSTOPS)
    IO0=PG12, IO1=PG11, IO2=PG10, IO3=PG9, IO4=PD7, IO5=PD6, IO6=PA8, IO7=PF8,

    # HEATERS
    HEATER0=PB0, HEATER1=PB1, HEATER2=PC7, HEATER3=PF7, HEATER4=PF6,
    HEATER_BED=PE5, 

    # FANS
    FAN0=PA0,

    # ADC PORTS
    ADC5=PC1,

[temperature_sensor mainboard0]
sensor_type: temperature_mcu
sensor_mcu: mainboard0

[mcu toolboard0]
canbus_uuid: d4515d96685b
canbus_interface: can0

[board_pins BigTreeTech_EBB_36_v1_1]
#   BigTreeTech EBB 36 v1.1, pins can be found from
#   ref: https://github.com/bigtreetech/EBB
#   ref: https://raw.githubusercontent.com/bigtreetech/EBB/master/EBB%20CAN%20V1.1%20(STM32G0B1)/EBB36%20CAN%20V1.1/Hardware/EBB36%20CAN%20V1.1%26V1.2-PIN.png
mcu: toolboard0
#   A comma separated list of micro-controllers that may use the
#   aliases. The default is to apply the aliases to the main "mcu".
aliases:
    # DRIVERS
    DRIVER0_STEP=PD0, DRIVER0_DIR=PD1, DRIVER0_ENABLE=PD2, DRIVER0_UART=PA15,

    # HEATERS
    HEATER0=PA2,

    # FANS
    FAN1=PA0, FAN2=PA1,

    # THERMISTORS
    THERMISTOR0=PA3,

    # BLTouch
    BLTOUCH_SERVO=PB9, BLTOUCH_ENDSTOP=PB8,

    # I2C
    I2C_SDA=PB3, I2C_SCL=PB4,

    # ADXL
    ADXL_CS=PB12, ADXL_SCLK=PB10, ADXL_MOSI=PB11, ADXL_MISO=PB2,

[temperature_sensor toolboard0]
sensor_type: temperature_mcu
sensor_mcu: toolboard0

[stepper_x]
step_pin: mainboard0:DRIVER3_STEP
dir_pin: mainboard0:DRIVER3_DIR
enable_pin: !mainboard0:DRIVER3_ENABLE
full_steps_per_rotation: 200
microsteps: 256
rotation_distance: 40
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_endstop: 0
position_min: 0
position_max: 326
homing_speed: 80
homing_retract_dist: 0
# step_pulse_duration: 0.0000001 # Klipper default for TMCs
step_pulse_duration: 0.0000010 # Suggestion from Discord
# step_pulse_duration: 0.0000040 # Mellow default for TMC2209
# step_pulse_duration: 0.0000020 # Klipper default for all others

[stepper_y]
step_pin: mainboard0:DRIVER4_STEP
dir_pin: mainboard0:DRIVER4_DIR
enable_pin: !mainboard0:DRIVER4_ENABLE
full_steps_per_rotation: 200
microsteps: 256
rotation_distance: 40
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: 0
position_min: 0
position_max: 316
homing_speed: 80
homing_retract_dist: 0
# step_pulse_duration: 0.0000001 # Klipper default for TMCs
step_pulse_duration: 0.0000010 # Suggestion from Discord
# step_pulse_duration: 0.0000040 # Mellow default for TMC2209
# step_pulse_duration: 0.0000020 # Klipper default for all others

[stepper_z]
step_pin: mainboard0:DRIVER5_STEP
dir_pin: mainboard0:DRIVER5_DIR
enable_pin: !mainboard0:DRIVER5_ENABLE
full_steps_per_rotation: 200
microsteps: 64
rotation_distance: 1
endstop_pin: probe:z_virtual_endstop
position_min: -5
position_max: 375
homing_retract_dist: 5.0
homing_positive_dir: false
homing_speed: 5.0
second_homing_speed: 2.5
# step_pulse_duration: 0.0000001 # Klipper default for TMCs
step_pulse_duration: 0.0000010 # Suggestion from Discord
# step_pulse_duration: 0.0000040 # Mellow default for TMC2209
# step_pulse_duration: 0.0000020 # Klipper default for all others

# When we're happy, we take the values in the blue section and set the Klipper  values appropriately, along with 
# set to what is in the top of the sheet
#driver_TBL 
#driver_TOFF
# Usually 1 and 3 respectively.
# We may also have found that we've tweaked the driver current somewhat to hit the magic numbers.
# In this case, we take the calculated value in 
# Icoil (RMS)[A] and put that into run_current in the TMC config section.
#driver_HSTRT
#driver_HEND

[tmc2209 stepper_x]
uart_pin: mainboard0:DRIVER3_UART
interpolate: false
run_current: 0.990
sense_resistor: 0.110
stealthchop_threshold: 0
driver_TBL: 1
driver_TOFF: 3
driver_HSTRT: 5
driver_HEND: 3
driver_SGTHRS: 91  # 255 is most sensitive value, 0 is least sensitive
diag_pin: ^mainboard0:DRIVER3_DIAG

[tmc2209 stepper_y]
uart_pin: mainboard0:DRIVER4_UART
interpolate: false
run_current: 0.990
sense_resistor: 0.110
stealthchop_threshold: 0
driver_TBL: 1
driver_TOFF: 3
driver_HSTRT: 5
driver_HEND: 3
driver_SGTHRS: 91  # 255 is most sensitive value, 0 is least sensitive
diag_pin: ^mainboard0:DRIVER4_DIAG

[tmc2209 stepper_z]
uart_pin: mainboard0:DRIVER5_UART
interpolate: false
run_current: 0.990
sense_resistor: 0.110
stealthchop_threshold: 0
driver_TBL: 1
driver_TOFF: 3
driver_HSTRT: 5
driver_HEND: 3

[safe_z_home]
home_xy_position: 191, 170 # BED: 326, 316 - PROBE_OFFSET: -28, -12 = BedMaxX/2-ProbeX, BedMaxY/2-ProbeY
speed: 80.0
z_hop: 10
z_hop_speed: 15.0
move_to_previous: False

[heater_bed]
heater_pin: mainboard0:HEATER0
sensor_pin: mainboard0:ADC5
sensor_type: Generic 3950
control: pid
pid_Kp: 38.002
pid_Ki: 1.614
pid_Kd: 223.737
min_temp: 0
max_temp: 115
max_power: 0.6

[extruder]
step_pin: toolboard0:DRIVER0_STEP
dir_pin: toolboard0:DRIVER0_DIR
enable_pin: !toolboard0:DRIVER0_ENABLE
microsteps: 64
rotation_distance: 5.529
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: toolboard0:HEATER0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: toolboard0:THERMISTOR0
pullup_resistor: 4700
control: pid
pid_Kp: 23.513
pid_Ki: 2.272
pid_Kd: 60.839
min_temp: 0
min_extrude_temp: 170
max_temp: 280
max_extrude_only_distance: 150.0
max_extrude_only_velocity: 120
max_extrude_only_accel: 800
pressure_advance_smooth_time: 0.04

[tmc2209 extruder]
uart_pin: toolboard0:DRIVER0_UART
run_current: 0.672
stealthchop_threshold: 0
interpolate: False
driver_TBL: 1
driver_TOFF: 3
driver_HSTRT: 7
driver_HEND: 8

[probe]
pin: ^toolboard0:I2C_SDA
x_offset: -28.0
y_offset: -12.0
#z_offset: 0.435
speed: 5.0
samples: 3
sample_retract_dist: 0.4
lift_speed: 10
samples_result: median
samples_tolerance: 0.015
samples_tolerance_retries: 3

[heater_fan hotend_fan]
pin: toolboard0:FAN1
shutdown_speed: 1.0
heater: extruder
heater_temp: 50.0
fan_speed: 1.0

[fan]
pin: toolboard0:FAN2
#cycle_time: 0.02
#cycle_time: 0.00004 # 25 kHz
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
kick_start_time: 0.250
#off_below: 0.1
#   The minimum input speed which will power the fan (expressed as a
#   value from 0.0 to 1.0). When a speed lower than off_below is
#   requested the fan will instead be turned off. This setting may be
#   used to prevent fan stalls and to ensure kick starts are
#   effective. The default is 0.0.
#
#   This setting should be recalibrated whenever max_power is adjusted.
#   To calibrate this setting, start with off_below set to 0.0 and the
#   fan spinning. Gradually lower the fan speed to determine the lowest
#   input speed which reliably drives the fan without stalls. Set
#   off_below to the duty cycle corresponding to this value (for
#   example, 12% -> 0.12) or slightly higher.

[controller_fan mainboard_drivers]
pin: mainboard0:FAN0
stepper: stepper_x, stepper_y, stepper_z
max_power: 0.75
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#   See the "fan" section for a description of the above parameters.

[adxl345]
cs_pin: toolboard0:ADXL_CS
spi_software_sclk_pin: toolboard0:ADXL_SCLK
spi_software_mosi_pin: toolboard0:ADXL_MOSI
spi_software_miso_pin: toolboard0:ADXL_MISO
axes_map: x,z,y

[resonance_tester]
accel_chip: adxl345
probe_points:
    163, 158, 20

[virtual_sdcard]
path: ~/gcode_files
on_error_gcode:
    CANCEL_PRINT

[pause_resume]

[display_status]

[force_move]
enable_force_move: True
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.

[idle_timeout]
#gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

[firmware_retraction]
retract_length: 1.0
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
retract_speed: 60
#   The speed of retraction, in mm/s. The default is 20 mm/s.
unretract_extra_length: 0
#   The length (in mm) of *additional* filament to add when
#   unretracting.
unretract_speed: 60
#   The speed of unretraction, in mm/s. The default is 10 mm/s.

[gcode_arcs]
#resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.

[respond]
default_type: command
#   Sets the default prefix of the "M118" and "RESPOND" output to one
#   of the following:
#       echo: "echo: " (This is the default)
#       command: "// "
#       error: "!! "
# default_prefix: "echo: "
#   Directly sets the default prefix. If present, this value will
#   override the "default_type".

[save_variables]
filename: ~/klipper_config/svv_variables.cfg
#   Required - provide a filename that would be used to save the
#   variables to disk e.g. ~/variables.cfg

# [z_tilt]
# #   Z Spindel (left) / Z1 Spindel (right)
# #    X-36.5,Y105     / X293.5,Y105
# z_positions: -36.5, 105
#              293.5, 105
# #   A list of X,Y coordinates (one per line; subsequent lines
# #   indented) describing the location of each bed "pivot point". The
# #   "pivot point" is the point where the bed attaches to the given Z
# #   stepper. It is described using nozzle coordinates (the XY position
# #   of the nozzle if it could move directly above the point). The
# #   first entry corresponds to stepper_z, the second to stepper_z1,
# #   the third to stepper_z2, etc. This parameter must be provided.
# #   G30 P0 X35.5 Y105 Z-99999
# #   G30 P1 X214.5 Y105 Z-99999
# points: 0, 102
#         188, 102
# #   A list of X,Y coordinates (one per line; subsequent lines
# #   indented) that should be probed during a Z_TILT_ADJUST command.
# #   Specify coordinates of the nozzle and be sure the probe is above
# #   the bed at the given nozzle coordinates. This parameter must be
# #   provided.
# speed: 150
# #   The speed (in mm/s) of non-probing moves during the calibration.
# #   The default is 50.
# horizontal_move_z: 5
# #   The height (in mm) that the head should be commanded to move to
# #   just prior to starting a probe operation. The default is 5.
# retries: 10
# #   Number of times to retry if the probed points aren't within
# #   tolerance.
# retry_tolerance: 0.0075
# #   If retries are enabled then retry if largest and smallest probed
# #   points differ more than retry_tolerance. Note the smallest unit of
# #   change here would be a single step. However if you are probing
# #   more points than steppers then you will likely have a fixed
# #   minimum value for the range of probed points which you can learn
# #   by observing command output.

[bed_screws]
# Direct nozzle position
screw1: 0, 0 # front left
screw2: 326, 0 # front right
screw3: 163, 316 # back middle

[screws_tilt_adjust]
# Probe offset needs to be taken into account
screw1: 32, 8
screw1_name: front left screw
screw2: 318, 8
screw2_name: front right screw
screw3: 191, 304
screw3_name: rear right screw
horizontal_move_z: 10
speed: 50
screw_thread: CW-M3

[bed_mesh]
speed: 200
horizontal_move_z: 2
mesh_min: 28, 20 # Bed: 326, 316 | Probe: -28, -20
mesh_max: 298, 296
probe_count: 7
fade_start: 1.0
fade_end: 6.0
fade_target: 0
mesh_pps: 2
algorithm: bicubic
bicubic_tension: .1
# relative_reference_index: 4 # "(probe_count * probe_count - 1) / 2"

[input_shaper]
shaper_type_x: mzv
shaper_freq_x: 73.6
shaper_type_y: mzv
shaper_freq_y: 41.4

[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro MAYBE_HOME]
description: Only home unhomed axis
variable_is_kinematic_position_overriden: False
gcode:
    {% if printer["gcode_macro MAYBE_HOME"].is_kinematic_position_overriden|lower == 'true' %}
        RESPOND MSG="SET_CENTER_KINEMATIC_POSITION has been abused. Homing all axes. Please refrain from using SET_CENTER_KINEMATIC_POSITION outside of debugging purposes."
        G28
        SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=False
    {% else %}
        {% set axes = '' %}
        {% set isHomed = true %}
        {% set axesToHome = '' %}
        {% if params.X is defined %}
            {% set axes = axes ~ 'X ' %}
            {% if 'x' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'X ' %}
            {% endif %}
        {% endif %}
        {% if params.Y is defined %}
            {% set axes = axes ~ 'Y ' %}
            {% if 'y' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'Y ' %}
            {% endif %}
        {% endif %}
        {% if params.Z is defined %}
            {% set axes = axes ~ 'Z ' %}
            {% if 'z' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'Z ' %}
            {% endif %}
        {% endif %}
        {% if params.X is not defined and params.Y is not defined and params.Z is not defined %}
            {% set axes = '' %}
            {% if 'x' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'X ' %}
                {% endif %}
                {% if 'y' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'Y ' %}
            {% endif %}
            {% if 'z' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'Z ' %}
            {% endif %}
        {% endif %}
        {% if isHomed is false %}
            M117 Homing {axesToHome}
            RESPOND MSG="Homing {axesToHome}"
            G28 {axesToHome}
        {% else %}
            RESPOND MSG="All requested axes already homed, skipping.."
        {% endif %}
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    #### Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
        _TOOLHEAD_PARK_PAUSE_CANCEL
    {% endif %}
    TURN_OFF_HEATERS
    M106 S0
    CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    PAUSE_BASE
    _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read extrude from _TOOLHEAD_PARK_PAUSE_CANCEL macro #####
    {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        M83
        G1 E{extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %}
            M82
        {% endif %}
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
#   modify x_park, y_park, z_park_delta and extrude value if needed
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
    {% set y_park = printer.toolhead.axis_minimum.y|float + 5.0 %}
    {% set z_park_delta = 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - z_park_delta) %}
        {% set z_safe = z_park_delta %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        M83
        G1 E-{extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %}
            M82
        {% endif %}
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        G91
        G1 Z{z_safe} F900
        G90
        G1 X{x_park} Y{y_park} F6000
        {% if printer.gcode_move.absolute_coordinates|lower == 'false' %}
            G91
        {% endif %}
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro PRINT_START]
description: Start print procedure, use this in your Slicer.
gcode:
    CLEAR_PAUSE
    SAVE_GCODE_STATE NAME=PRINT_START
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}
    {% set Z_TILT = params.Z_TILT|default("false") %}
    {% set BED_MESH = params.BED_MESH|default("none") %}
    {% if rawparams %}
        {% set RAW_PARAMS = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    {% endif %}

    # Metric values
    G21
    # Absolute positioning
    G90 
    # Set extruder to relative extrusions
    M83
    # Home the printer
    G28
    # Start bed heating and wait for target temperature
    M190 S{BED_TEMP}
    # Z-TILT
    {% if Z_TILT == "true"|lower %}
        Z_TILT_ADJUST
        G28 Z
    {% endif %}
    # BED_MESH
    BED_MESH_CLEAR
    {% if BED_MESH|lower == "calibrate" %}
        BED_MESH_CALIBRATE
    {% endif %}
    {% if BED_MESH|lower == "pla" %}
        BED_MESH_PROFILE LOAD={BED_MESH}
    {% endif %}
    # Move nozzle to ooze position
    G1 X0 Y0 Z0.2 F6000
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    _PRIME_LINE
    RESTORE_GCODE_STATE NAME=PRINT_START

[gcode_macro _PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the PRINT_START macro.
gcode:
    SAVE_GCODE_STATE NAME=PRIME_LINE
    # Absolute positioning
    G90 
    # Absolute extrusion
    M82
    M117 Priming nozzle with prime line..
    RESPOND MSG="Priming nozzle with prime line.."
    # Lift 5 mm
    G1 Z5 F3000
    # Move to prime area
    G1 X{printer.toolhead.axis_minimum.x + 1} Y{printer.toolhead.axis_minimum.y + 1} F3000
    # Get ready to prime
    G1 Z0.3 F3000
    # Reset extrusion distance
    G92 E0
    # Prime nozzle 
    G1 X{printer.toolhead.axis_minimum.x + 80} E16 F1200
    # Wipe
    G1 X{printer.toolhead.axis_minimum.x + 100} F6000
    RESTORE_GCODE_STATE NAME=PRIME_LINE

[gcode_macro PRINT_END]
description: Runs at the very end of a print, turns of heaters, fans and moves the head away.
gcode:
    SAVE_GCODE_STATE NAME=END_PRINT

    {% set END_X = params.X|default(printer.toolhead.axis_minimum.x + 5)|float %}
    {% set END_Y = params.Y|default(printer.toolhead.axis_maximum.y)|float %}
    {% set END_Z = params.Z|default(10)|float %}

    # Metric values
    G21
    # Absolute positioning
    G90 
    # Set extruder to relative extrusions
    M83

    # Retract filament if possible
    {% if printer.extruder.temperature > printer.configfile.settings.extruder.min_extrude_temp %}
        G1 E-3 F600
    {% endif %}

    # Safely raise nozzle by 10mm
    _SAFE_RAISE_Z Z={END_Z}

    # Move head to parking position
    G1 X{END_X} Y{END_Y} F6000

    # Turn off bed, extruder, and fan(s)
    M140 S0
    M104 S0
    M107

    # Disable steppers
    M84
    RESTORE_GCODE_STATE NAME=END_PRINT

[gcode_macro _SAFE_RAISE_Z]
gcode:
    SAVE_GCODE_STATE NAME=SAFE_RAISE_Z
    ##### set defaults #####
    {% set z = params.Z|default(10)|float %} #edit to your park position
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    G91
    G1 Z{z_safe}
    RESTORE_GCODE_STATE NAME=SAFE_RAISE_Z

[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    G91
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
        M117 Heating...
        M104 S{params.TEMP|default(220, true)}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
    {% endif %}
    M117 Loading filament...
    # Load the filament into the hotend area
    G0 E50 F600
    # Wait a second
    G4 P1000
    # Purge
    G0 E40 F100
    # Wait for purge to complete
    M400
    M117 Filament loaded!
    RESPOND MSG="Filament loaded!"
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
    G91
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
        M117 Heating...
        # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments
        M104 S{params.TEMP|default(220, true)}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
    {% endif %}
    M117 Unloading filament...
    # Retract filament to cold end area
    G0 E-5 F3600
    # Wait for three seconds
    G4 P3000
    # Push back the filament to smash any stringing
    G0 E5 F3600
    # Retract back fast in to the cold zone and wait another 4 seconds
    G0 E-15 F3600
    G4 P4000
    # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears
    G0 E-50 F300
    M117 Filament unloaded!
    RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT

[gcode_macro M572]
gcode:
    {% if 'S' in params %}
        {% set S = params.S|float %}
        SET_PRESSURE_ADVANCE ADVANCE={S}
    {% else %}
        SET_PRESSURE_ADVANCE
    {% endif %}

[gcode_macro M207]
# Snnn positive length to retract, in mm
# Rnnn positive or negative additional length to un-retract, in mm, default zero
# Fnnn retraction feedrate, in mm/min
# Tnnn feedrate for un-retraction if different from retraction, mm/min (RepRapFirmware 1.16 and later only)
# Znnn additional zlift/hop
# SET_RETRACTION [RETRACT_LENGTH=<mm>] [RETRACT_SPEED=<mm/s>] [UNRETRACT_EXTRA_LENGTH=<mm>] [UNRETRACT_SPEED=<mm/s>]
gcode:
    # {% set S = params.S | float %}

    # {% if not (params.S or params.F or params.R or params.T)  %}
    #     GET_RETRACTION
    # {% endif %}

    {% if (params.S or params.F or params.R or params.T) %}
        SET_RETRACTION {% if params.S%}RETRACT_LENGTH={params.S|float} {% endif -%}
                       {% if params.F%}RETRACT_SPEED={params.F|float} {% endif -%}
                       {% if params.R%}UNRETRACT_EXTRA_LENGTH={params.R|float} {% endif -%}
                       {% if params.T%}UNRETRACT_SPEED={params.T|float}{% endif -%}
    {% endif %}
    GET_RETRACTION

[gcode_macro M204]
rename_existing: M204.1
gcode:
    {% set f = params.F|default(0.5)|float %}

    {% if 'S' in params %}
        {% set s = params.S|float %}
        SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
    {% else %}
        {% if 'P' in params %}
            {% set p = params.P|float %}
            {% if 'T' in params %}
                {% set t = params.T|float %}
                {% if p < t %}
                    SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
                {% else %}
                    SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
                {% endif %}
            {% else %}
                SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
            {% endif %}
        {% elif 'T' in params %}
            {% set t = params.T|float %}
            SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
    {% endif %}

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 

            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro INITIALIZE_VARIABLE]
gcode:
  {% if 'VARIABLE' not in params %}
    {action_respond_info("Missing VARIABLE parameter")}
  {% elif 'VALUE' not in params %}
    {action_respond_info("Missing VALUE parameter")}
  {% else %}
    {% set svv = printer.save_variables.variables %}
    {% if params.VARIABLE not in svv %}
      {% set escaped = params.VALUE|replace("\"", "\\\"") %}
      SAVE_VARIABLE VARIABLE={params.VARIABLE} VALUE="{escaped}"
    {% endif %}
  {% endif %}

[delayed_gcode MACROS_INITIALIZE]
initial_duration: 1
gcode:
    INITIALIZE_VARIABLE VARIABLE=park_x VALUE=30
    INITIALIZE_VARIABLE VARIABLE=park_y VALUE=30
    INITIALIZE_VARIABLE VARIABLE=bowden_len VALUE=300

[include macros/web-macros.cfg]
[include macros/shell-macros.cfg]
[include macros/timelapse.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*# z_offset = 0.380
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.163125, -0.103281, -0.047891, -0.123359, -0.221484
#*# 	  -0.186875, -0.104453, -0.009219, -0.050234, -0.102500
#*# 	  -0.235391, -0.114375, -0.009766, -0.002813, -0.082422
#*# 	  -0.333359, -0.188750, -0.081797, -0.061563, -0.103594
#*# 	  -0.348359, -0.272266, -0.167422, -0.148125, -0.150938
#*# tension = 0.1
#*# min_x = 28.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 20.0
#*# x_count = 5
#*# max_y = 296.0
#*# mesh_x_pps = 2
#*# max_x = 298.0
