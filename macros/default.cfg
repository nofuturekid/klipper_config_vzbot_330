[gcode_macro MAYBE_HOME]
description: Only home unhomed axis
variable_is_kinematic_position_overriden: False
gcode:
    {% if printer["gcode_macro MAYBE_HOME"].is_kinematic_position_overriden|lower == 'true' %}
        RESPOND MSG="SET_CENTER_KINEMATIC_POSITION has been abused. Homing all axes. Please refrain from using SET_CENTER_KINEMATIC_POSITION outside of debugging purposes."
        G28
        SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=False
    {% else %}
        {% set axes = '' %}
        {% set isHomed = true %}
        {% set axesToHome = '' %}
        {% if params.X is defined %}
            {% set axes = axes ~ 'X ' %}
            {% if 'x' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'X ' %}
            {% endif %}
        {% endif %}
        {% if params.Y is defined %}
            {% set axes = axes ~ 'Y ' %}
            {% if 'y' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'Y ' %}
            {% endif %}
        {% endif %}
        {% if params.Z is defined %}
            {% set axes = axes ~ 'Z ' %}
            {% if 'z' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'Z ' %}
            {% endif %}
        {% endif %}
        {% if params.X is not defined and params.Y is not defined and params.Z is not defined %}
            {% set axes = '' %}
            {% if 'x' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'X ' %}
                {% endif %}
                {% if 'y' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'Y ' %}
            {% endif %}
            {% if 'z' not in printer.toolhead.homed_axes %}
                {% set isHomed = false %}
                {% set axesToHome = axesToHome ~ 'Z ' %}
            {% endif %}
        {% endif %}
        {% if isHomed is false %}
            M117 Homing {axesToHome}
            RESPOND MSG="Homing {axesToHome}"
            G28 {axesToHome}
        {% else %}
            RESPOND MSG="All requested axes already homed, skipping.."
        {% endif %}
    {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    #### Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
        _TOOLHEAD_PARK_PAUSE_CANCEL
    {% endif %}
    TURN_OFF_HEATERS
    M106 S0
    CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    PAUSE_BASE
    _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read extrude from _TOOLHEAD_PARK_PAUSE_CANCEL macro #####
    {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
        {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
        {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        M83
        G1 E{extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %}
            M82
        {% endif %}
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
#   modify x_park, y_park, z_park_delta and extrude value if needed
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
    {% set y_park = printer.toolhead.axis_minimum.y|float + 5.0 %}
    {% set z_park_delta = 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - z_park_delta) %}
        {% set z_safe = z_park_delta %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
        M83
        G1 E-{extrude} F2100
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %}
            M82
        {% endif %}
    {% else %}
        {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        G91
        G1 Z{z_safe} F900
        G90
        G1 X{x_park} Y{y_park} F6000
        {% if printer.gcode_move.absolute_coordinates|lower == 'false' %}
            G91
        {% endif %}
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}

[gcode_macro PRINT_START]
description: Start print procedure, use this in your Slicer.
gcode:
    CLEAR_PAUSE

    # Metric values
    G21
    # Absolute positioning
    G90 
    # Set extruder to relative extrusions
    M83

    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}
    {% set Z_TILT = params.Z_TILT|default("false") %}
    {% set BED_MESH = params.BED_MESH|lower|default("none") %}
    {% if rawparams %}
        {% set RAW_PARAMS = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    {% endif %}

    # Turn on bedheater relay and already start heating
    # HEATBED_POWER POWER=on
    # G4 S5
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}

    # Home the printer
    G28

    # Wait for heatbed to reach temperature
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP}

    # Z-TILT
    {% if Z_TILT == "true"|lower %}
        Z_TILT_ADJUST
    {% endif %}

    # BED_MESH
    BED_MESH_CLEAR
    {% if BED_MESH|lower != "" %}
        {% if BED_MESH|lower == "calibrate" %}
            BED_MESH_CALIBRATE
        {% else %}
            BED_MESH_PROFILE LOAD={BED_MESH}
        {% endif %}
    {% endif %}

    # Move nozzle to ooze position
    G1 X0 Y0 Z0.2 F6000

    # Set and wait for nozzle to reach temperature
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}

    _PRIME_LINE

    # Metric values
    G21
    # Absolute positioning
    G90 
    # Set extruder to relative extrusions
    M83

[gcode_macro _PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the PRINT_START macro.
gcode:
    SAVE_GCODE_STATE NAME=PRIME_LINE
    # Absolute positioning
    G90 
    # Absolute extrusion
    M82
    M117 Priming nozzle with prime line..
    RESPOND MSG="Priming nozzle with prime line.."
    # Lift 5 mm
    G1 Z5 F3000
    # Move to prime area
    G1 X{printer.toolhead.axis_minimum.x + 1} Y{printer.toolhead.axis_minimum.y + 1} F3000
    # Get ready to prime
    G1 Z0.3 F3000
    # Reset extrusion distance
    G92 E0
    # Prime nozzle 
    G1 X{printer.toolhead.axis_minimum.x + 80} E16 F1200
    # Wipe
    G1 X{printer.toolhead.axis_minimum.x + 100} F6000
    RESTORE_GCODE_STATE NAME=PRIME_LINE

[gcode_macro PRINT_END]
description: Runs at the very end of a print, turns of heaters, fans and moves the head away.
gcode:
    SAVE_GCODE_STATE NAME=END_PRINT

    {% set END_X = params.X|default(printer.toolhead.axis_minimum.x + 5)|float %}
    {% set END_Y = params.Y|default(printer.toolhead.axis_maximum.y - 5)|float %}
    {% set END_Z = params.Z|default(50)|float %}

    # Metric values
    G21
    # Absolute positioning
    G90 
    # Set extruder to relative extrusions
    M83

    # Retract filament if possible
    {% if printer.extruder.temperature > printer.configfile.settings.extruder.min_extrude_temp %}
        G1 E-3 F600
    {% endif %}

    # Safely raise nozzle by 10mm
    _SAFE_RAISE_Z Z={END_Z}

    # Move head to parking position
    G1 X{END_X} Y{END_Y} F6000

    # Turn off bed, extruder, and fan(s)
    M104 S0
    M140 S0
    M107

    # Reset flow and speed
    M220 S100
    M221 S100

    # Disable steppers
    M84
    RESTORE_GCODE_STATE NAME=END_PRINT

[gcode_macro _SAFE_RAISE_Z]
gcode:
    SAVE_GCODE_STATE NAME=SAFE_RAISE_Z
    ##### set defaults #####
    {% set z = params.Z|default(10)|float %} #edit to your park position
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    G91
    G1 Z{z_safe}
    RESTORE_GCODE_STATE NAME=SAFE_RAISE_Z

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 

            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro HEATBED_POWER]
gcode:
    {% set POWER = params.POWER|default("off")|string %}
    {action_call_remote_method("set_device_power",
                             device="Heatbed Mains",
                             state=POWER)}
